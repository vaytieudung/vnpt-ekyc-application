// Popper.js - Positioning library (simplified implementation)
// This is a minimal implementation for demonstration purposes

class PopperCore {
    constructor(reference, popper, options = {}) {
        this.reference = reference;
        this.popper = popper;
        this.options = {
            placement: 'bottom',
            modifiers: [],
            strategy: 'absolute',
            ...options
        };
        this.state = {
            placement: this.options.placement,
            strategy: this.options.strategy
        };
    }

    update() {
        if (!this.reference || !this.popper) return;

        const referenceRect = this.reference.getBoundingClientRect();
        const popperRect = this.popper.getBoundingClientRect();
        
        let top, left;

        switch (this.state.placement) {
            case 'top':
                top = referenceRect.top - popperRect.height;
                left = referenceRect.left + (referenceRect.width - popperRect.width) / 2;
                break;
            case 'bottom':
                top = referenceRect.bottom;
                left = referenceRect.left + (referenceRect.width - popperRect.width) / 2;
                break;
            case 'left':
                top = referenceRect.top + (referenceRect.height - popperRect.height) / 2;
                left = referenceRect.left - popperRect.width;
                break;
            case 'right':
                top = referenceRect.top + (referenceRect.height - popperRect.height) / 2;
                left = referenceRect.right;
                break;
            default:
                top = referenceRect.bottom;
                left = referenceRect.left;
        }

        this.popper.style.position = this.state.strategy;
        this.popper.style.top = `${top}px`;
        this.popper.style.left = `${left}px`;
        this.popper.style.zIndex = '1000';

        return this.state;
    }

    setOptions(options) {
        this.options = { ...this.options, ...options };
        this.state.placement = this.options.placement;
        return this.update();
    }

    destroy() {
        // Clean up event listeners and references
        this.reference = null;
        this.popper = null;
    }

    static createPopper(reference, popper, options) {
        return new PopperCore(reference, popper, options);
    }
}

// Tooltip utility
class Tooltip {
    constructor(element, options = {}) {
        this.element = element;
        this.options = {
            title: '',
            placement: 'top',
            trigger: 'hover',
            ...options
        };
        this.tooltip = null;
        this.popper = null;
        this.init();
    }

    init() {
        if (this.options.trigger === 'hover') {
            this.element.addEventListener('mouseenter', () => this.show());
            this.element.addEventListener('mouseleave', () => this.hide());
        } else if (this.options.trigger === 'click') {
            this.element.addEventListener('click', () => this.toggle());
        }
    }

    show() {
        if (this.tooltip) return;

        this.tooltip = document.createElement('div');
        this.tooltip.className = 'tooltip';
        this.tooltip.textContent = this.options.title;
        this.tooltip.style.cssText = `
            position: absolute;
            background: #333;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            z-index: 1000;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s;
        `;

        document.body.appendChild(this.tooltip);

        this.popper = PopperCore.createPopper(this.element, this.tooltip, {
            placement: this.options.placement
        });

        // Trigger reflow and show
        requestAnimationFrame(() => {
            this.tooltip.style.opacity = '1';
        });
    }

    hide() {
        if (!this.tooltip) return;

        this.tooltip.style.opacity = '0';
        setTimeout(() => {
            if (this.tooltip) {
                document.body.removeChild(this.tooltip);
                this.tooltip = null;
            }
            if (this.popper) {
                this.popper.destroy();
                this.popper = null;
            }
        }, 200);
    }

    toggle() {
        if (this.tooltip) {
            this.hide();
        } else {
            this.show();
        }
    }

    destroy() {
        this.hide();
        // Remove event listeners would go here
    }
}

// Global exports
window.Popper = PopperCore;
window.createPopper = PopperCore.createPopper;
window.Tooltip = Tooltip;

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Popper: PopperCore, createPopper: PopperCore.createPopper, Tooltip };
}
